/* Scanner_1.java */
/* Generated By:JavaCC: Do not edit this line. Scanner_1.java */
package Compiladores;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;

public class Scanner_1 implements Scanner_1Constants {

boolean Menosshort = false; //Saida resumida falso
public void processa() throws Exception{
Token t = new Token ();

do {

t = getNextToken(); //Obtém o próximo token
String nomeToken = tokenImage[t.kind]; //guarda o nome do token na string

} while(t.kind!=0); //condicao de parada: final do arquivo (constante eof 0 )
}

public static void main(String args[], String x) throws ParseException, FileNotFoundException {

try {

}catch (Error e){
System.out.println(e.getMessage()); //Mensagem de erro léxico (em ingles) mostrando linha e coluna
}

}

  final public void INIT() throws ParseException {
    program();
  }

  final public void program() throws ParseException {
    jj_consume_token(BEGIN);
    jj_consume_token(ID);
    jj_consume_token(AP);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case DOUBLE:
    case CHAR:{
      parameter();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(FP);
    jj_consume_token(AC);
    statement();
    jj_consume_token(FC);
  }

  final public void statement() throws ParseException {
    expression();
    jj_consume_token(PV);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:
    case FLOAT:
    case DOUBLE:
    case CHAR:{
      statement();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void expression() throws ParseException {
    variable();
  }

  final public void variable() throws ParseException {
    type();
    jj_consume_token(ID);
    jj_consume_token(ASGN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AP:
    case VDOUBLE:
    case VINT:{
      nested_value();
      break;
      }
    case VCHAR:{
      jj_consume_token(VCHAR);
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void nested_value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AP:{
      jj_consume_token(AP);
      nested_value();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SOMA:
      case SUBT:{
        operations();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(FP);
      break;
      }
    case VDOUBLE:
    case VINT:{
      numeric_value();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT:{
      jj_consume_token(INT);
      break;
      }
    case FLOAT:{
      jj_consume_token(FLOAT);
      break;
      }
    case DOUBLE:{
      jj_consume_token(DOUBLE);
      break;
      }
    case CHAR:{
      jj_consume_token(CHAR);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void numeric_value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VINT:{
      jj_consume_token(VINT);
      break;
      }
    case VDOUBLE:{
      jj_consume_token(VDOUBLE);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void parameter() throws ParseException {
    type();
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case V:{
      parameterlist();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void parameterlist() throws ParseException {
    jj_consume_token(V);
    parameter();
  }

  final public void operations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SOMA:{
      jj_consume_token(SOMA);
      nested_value();
      break;
      }
    case SUBT:{
      jj_consume_token(SUBT);
      nested_value();
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public Scanner_1TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3c0000,0x3c0000,0x1c00c00,0x6000000,0x1400800,0x3c0000,0x1400000,0x10000,0x6000000,};
   }

  /** Constructor with InputStream. */
  public Scanner_1(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Scanner_1(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Scanner_1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Scanner_1(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Scanner_1TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Scanner_1(Scanner_1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Scanner_1TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
